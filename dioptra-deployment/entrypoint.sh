#!/bin/bash
# This Software (Dioptra) is being made available as a public service by the
# National Institute of Standards and Technology (NIST), an Agency of the United
# States Department of Commerce. This software was developed in part by employees of
# NIST and in part by NIST contractors. Copyright in portions of this software that
# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant
# to Title 17 United States Code Section 105, works of NIST employees are not
# subject to copyright protection in the United States. However, NIST may hold
# international copyright in software created by its employees and domestic
# copyright (or licensing rights) in portions of software that were assigned or
# licensed to NIST. To the extent that NIST holds copyright in this software, it is
# being made available under the Creative Commons Attribution 4.0 International
# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts
# of the software developed or licensed by NIST.
#
# ACCESS THE FULL CC BY 4.0 LICENSE HERE:
# https://creativecommons.org/licenses/by/4.0/legalcode

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([results-ttl],[],[Job results will be kept for this number of seconds],[500])
# ARG_OPTIONAL_REPEATED([wait-for],[],[Wait on the availability of a host and TCP port before proceeding],[])
# ARG_LEFTOVERS([Queues to watch])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Dioptra Worker Entry Point\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_results_ttl="500"
_arg_wait_for=()


print_help()
{
  printf '%s\n' "Dioptra Worker Entry Point
"
  printf 'Usage: %s [--results-ttl <arg>] [--wait-for <arg>] [-h|--help] ... \n' "$0"
  printf '\t%s\n' "... : Queues to watch"
  printf '\t%s\n' "--results-ttl: Job results will be kept for this number of seconds (default: '500')"
  printf '\t%s\n' "--wait-for: Wait on the availability of a host and TCP port before proceeding (empty by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --results-ttl)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_results_ttl="$2"
        shift
        ;;
      --results-ttl=*)
        _arg_results_ttl="${_key##--results-ttl=}"
        ;;
      --wait-for)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_wait_for+=("$2")
        shift
        ;;
      --wait-for=*)
        _arg_wait_for+=("${_key##--wait-for=}")
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names=""
  _our_args=$((${#_positionals[@]} - 0))
  for ((ii = 0; ii < _our_args; ii++))
  do
    _positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

###########################################################################################
# Global parameters
###########################################################################################

readonly dioptra_workdir="${DIOPTRA_WORKDIR}"
readonly job_queues="${_arg_leftovers[*]}"
readonly logname="Container Entry Point"
readonly rq_redis_uri="${RQ_REDIS_URI-}"
readonly rq_results_ttl="${_arg_results_ttl}"

###########################################################################################
# Wait for services to start
#
# Globals:
#   _arg_wait_for
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

wait_for_services() {
  for service in ${_arg_wait_for[@]}; do
    if ! (/usr/local/bin/wait-for-it.sh -t 0 ${service}); then
      echo "${logname}: ERROR - Unexpected error while waiting for ${service}." 1>&2
      exit 1
    fi
  done
}

###########################################################################################
# Start Redis Queue Worker
#
# Globals:
#   dioptra_workdir
#   job_queues
#   logname
#   rq_redis_uri
#   rq_results_ttl
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

start_rq() {
  echo "${logname}: starting Dioptra worker"
  echo "${logname}: dioptra-worker-v1 --url ${rq_redis_uri} --results-ttl ${rq_results_ttl} \
  ${job_queues}"

  cd ${dioptra_workdir}

  while true; do
    dioptra-worker-v1 \
      --url ${rq_redis_uri} \
      --results-ttl ${rq_results_ttl} \
      "${job_queues}" \
      2>&1 | tee -a /var/log/dioptra-worker.log
    exit_code=$?
    echo "Worker process exited with exit code $exit_code; restarting in 5 seconds..."
    sleep 5
  done
}

###########################################################################################
# Main script
###########################################################################################

wait_for_services
start_rq
# ] <-- needed because of Argbash